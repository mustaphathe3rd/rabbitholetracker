// background/report-generator.js
// This module uses the experimental Writer API to synthesize a browsing session's data
// into a coherent, structured, and human-readable article.

/**
 * The main function to generate a report from the current session. It is triggered by a
 * message from the popup UI.
 */
export async function generateSessionReport() {
    console.log("REPORT_GENERATOR: Starting session report generation...");

    // 1. Check if the Writer API is supported and available.
    // This requires the user to have the correct hardware and to have registered for the Origin Trial.
    if (!self.Writer) {
        console.warn("REPORT_GENERATOR: Writer API is not available in this browser.");
        return;
    }
    const availability = await self.Writer.availability();
    if (availability !== 'available' && availability !== 'readily') {
        console.warn("REPORT_GENERATOR: Writer model is not ready. Status:", availability);
        return;
    }

    // 2. Retrieve the current browsing session data.
    const data = await chrome.storage.session.get('currentSession');
    const session = data.currentSession;
    if (!session || !session.pages || !session.pages.length === 0) {
        console.warn("REPORT_GENERATOR: No active session data to report.");
        return;
    }

    // 3. Format the session data into a simple text block to be used in the prompt.
    let promptData = `Primary Topic: ${session.primaryTopic}\n\nPages Visited:\n`;
    session.pages.forEach(page => {
        promptData += `- Title: ${page.title}\n`;
        if (page.aiTopics && page.aiTopics.length > 0) {
            promptData += `  AI Topics: ${page.aiTopics.join(', ')}\n`;
        }
    });

    // 4. Craft a detailed prompt, instructing the AI to act as a writer and use Markdown.
    const prompt = `
        You are a skilled writer and analyst. Your task is to synthesize the following raw browsing data into a short, coherent article (not just a list) using Markdown.
        Here is the data from the browsing session:
        ---
        ${promptData}
        ---
        Please do the following:
        1. Create an insightful title for the article that captures the main theme of the user's journey of discovery.
        2. Write a brief introductory paragraph that summarizes the overall theme.
        3. For each major topic or website visited, write a small paragraph that explains what was explored, drawing connections between the different pages where possible.
        4. Use Markdown for formatting (e.g., # for the title, ## for subheadings, * for italics).
    `;

    // 5. Call the Writer API and display the result.
    try {
        const writer = await self.Writer.create({ format: 'markdown' });
        const reportContent = await writer.write(prompt);
        await displayReportInNewTab(reportContent);
        // Clean up the writer instance to free up memory.
        writer.destroy();
    } catch (error) {
        console.error("REPORT_GENERATOR: Error during report generation:", error);
    }
}

/**
 * Displays the generated report in a new, dedicated tab.
 * This method is more robust than using a 'data:' URL.
 * @param {string} reportContent - The Markdown text generated by the AI.
 */
async function displayReportInNewTab(reportContent) {
    // 1. Save the report content to temporary local storage.
    await chrome.storage.local.set({ latestReport: reportContent });

    // 2. Open our dedicated report.html page, which will read from storage.
    await chrome.tabs.create({ url: 'report/report.html' });
}